<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Buddy.Coroutines</name>
    </assembly>
    <members>
        <member name="T:Buddy.Coroutines.Coroutine">
            <summary>
            Represents a coroutine.
            </summary>
        </member>
        <member name="M:Buddy.Coroutines.Coroutine.#ctor(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Initializes a new <see cref="T:Buddy.Coroutines.Coroutine"/> with the specified coroutine task producer.
            </summary>
            <param name="taskProducer">A producer that kicks off the coroutine task and returns it.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="taskProducer"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Buddy.Coroutines.Coroutine.#ctor(System.Func{System.Threading.Tasks.Task{System.Object}})">
            <summary>
            Initializes a new <see cref="T:Buddy.Coroutines.Coroutine"/> with the specified coroutine task producer.
            </summary>
            <param name="taskProducer">A producer that kicks off the coroutine task and returns it. The result returned by the task is saved in <see cref="P:Buddy.Coroutines.Coroutine.Result"/> when the coroutine finishes.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="taskProducer"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Buddy.Coroutines.Coroutine.Resume">
            <summary>
            Resumes the coroutine.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if the coroutine is disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the coroutine cannot be resumed because it has finished running; see <see cref="P:Buddy.Coroutines.Coroutine.IsFinished"/>. Also thrown if a coroutine tries to resume itself.</exception>
            <exception cref="T:Buddy.Coroutines.CoroutineUnhandledException">Thrown if the coroutine throws an exception. For the exception thrown by the coroutine, see <see cref="P:System.Exception.InnerException"/>.</exception>
            <exception cref="T:Buddy.Coroutines.CoroutineBehaviorException">
            <para>Thrown if the code being executed by this <see cref="T:Buddy.Coroutines.Coroutine"/> class behaves in an unexpected way.</para>
            <para>There are several situations where this exception is thrown. They are listed below.</para>
            <list type="bullet">
            <item><description>The root coroutine task producer (that is, the task producer passed to the constructor of this class) returns <c>null</c>.</description></item>
            <item><description>The coroutine awaits an external task. The coroutine should only await tasks from the <see cref="T:Buddy.Coroutines.Coroutine"/> class, or other tasks that only await tasks from the <see cref="T:Buddy.Coroutines.Coroutine"/> class.</description></item>
            <item><description>The coroutine creates multiple tasks without awaiting them. Coroutines should always immediately await the tasks they create.</description></item>
            </list>
            </exception>
        </member>
        <member name="M:Buddy.Coroutines.Coroutine.Dispose">
            <summary>
            Disposes this coroutine.
            </summary>
            <exception cref="T:Buddy.Coroutines.CoroutineBehaviorException">Thrown if the coroutine being disposed of catches the <see cref="T:Buddy.Coroutines.CoroutineStoppedException"/> thrown.</exception>
            <exception cref="T:Buddy.Coroutines.CoroutineStoppedException">Thrown if the coroutine being disposed of is the current coroutine. This exception is expected and handled by the coroutine framework, and should therefore not be caught.</exception>
            <remarks>
            <para>Disposing a coroutine before it has finished running is a complicated process which requires unwinding the coroutine's tasks to make sure any finally blocks are executed.</para>
            </remarks>
            <example>
            <para>The following example demonstrates when exceptions are thrown by this function, and when they are not.</para>
            <code>
            private static async Task Example1()
            {
            	// Proper unwinding. Exception is thrown by Dispose to facilitate the unwinding.
            	try
            	{
            		await DisposeCurrent();
            		await Coroutine.Yield(); // This line is never hit
            	}
            	finally
            	{
            		// The finally block is executed as a result of the exception being thrown
            		// Coroutine is properly unwound
            	}
            }
            
            private static async Task DisposeCurrent()
            {
            	await Coroutine.Yield();
            	Coroutine.Current.Dispose(); // CoroutineStoppedException is thrown here. This exception is expected and should not be caught.
            }
            
            private static async Task Example2()
            {
            	// Proper unwinding. No exception is thrown by Dispose
            	try
            	{
            		await Coroutine.Yield();
            		await Coroutine.Yield();
            	}
            	finally
            	{
            		// The finally block is executed as a result of 'Coroutine.Yield' throwing the CoroutineStoppedException
            		// Coroutine is properly unwound
            	}
            }
            
            private static async Task Example3()
            {
            	try
            	{
            		try
            		{
            			await Coroutine.Yield();
            		}
            		catch (CoroutineStoppedException)
            		{
            		}
            
            		await Coroutine.Yield();
            	}
            	finally
            	{
            		// This finally block is never executed. Dispose throws a CoroutineBehaviorException.
            	}
            }
            private static void Main()
            {
            	Coroutine coroutine = new Coroutine(() =&gt; Example1());
            	coroutine.Resume();
            	coroutine.Resume();
            	// coroutine.IsFinished == true, coroutine.Status == CoroutineStatus.Stopped
            
            	coroutine = new Coroutine(() =&gt; Example2());
            	coroutine.Resume();
            	coroutine.Dispose();
            	// coroutine.IsFinished == true, coroutine.Status == CoroutineStatus.Stopped
            
            	coroutine = new Coroutine(() =&gt; Example3());
            	coroutine.Resume();
            	coroutine.Dispose(); // CoroutineBehaviorException is thrown here
            }
            </code>
            </example>
        </member>
        <member name="M:Buddy.Coroutines.Coroutine.ToString">
            <summary>
            Gets a string representation of this coroutine.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buddy.Coroutines.Coroutine.CheckInCoroutine">
            <summary>
            Ensures the current function is executing in a coroutine and raises an exception if not.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the function is not executing in a coroutine.</exception>
        </member>
        <member name="M:Buddy.Coroutines.Coroutine.Yield">
            <summary>
            Yields back to the coroutine, executing the rest of the current function in the next tick.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the function is not executing in a coroutine.</exception>
            <returns>The coroutine task.</returns>
        </member>
        <member name="M:Buddy.Coroutines.Coroutine.Sleep(System.TimeSpan)">
            <summary>
            Gets a coroutine task that sleeps for the specified <paramref name="timeout"/>.
            </summary>
            <param name="timeout">The timeout to sleep.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the function is not executing in a coroutine.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="timeout"/> is negative and not equal to <see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/>.</exception>
            <returns>The coroutine task.</returns>
        </member>
        <member name="M:Buddy.Coroutines.Coroutine.Sleep(System.Int32)">
            <summary>
            Gets a coroutine task that sleeps for the specified amount of <paramref name="milliseconds"/>.
            </summary>
            <param name="milliseconds">The amount of milliseconds to sleep.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the function is not executing in a coroutine.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="milliseconds"/> is negative and not equal to <see cref="F:System.Threading.Timeout.Infinite"/>.</exception>
            <returns>The coroutine task.</returns>
        </member>
        <member name="M:Buddy.Coroutines.Coroutine.Wait(System.TimeSpan,System.Func{System.Boolean})">
            <summary>Gets a coroutine task that waits for the specified <paramref name="condition"/> to become true, for up to the specified max time.
            Returns <c>true</c> if the <paramref name="condition"/> becomes <c>true</c> before the max wait time is over.</summary>
            <param name="maxWaitTimeout">The max time to wait, or <c>Timeout.InfiniteTimeSpan</c> for an infinite wait.</param>
            <param name="condition">The condition.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="condition"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="maxWaitTimeout"/> is negative and not equal to <see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the function is not executing in a coroutine.</exception>
            <returns>A coroutine task that returns true if <paramref name="condition"/> evaluates to true during the timeout period; otherwise false.</returns>
        </member>
        <member name="M:Buddy.Coroutines.Coroutine.Wait(System.Int32,System.Func{System.Boolean})">
            <summary>Gets a coroutine task that waits for the specified <paramref name="condition"/> to become true, for up to the specified max time.
            Returns <c>true</c> if the <paramref name="condition"/> becomes <c>true</c> before the max wait time is over.</summary>
            <param name="maxWaitMs">The max time to wait, in milliseconds, or <c>Timeout.Infinite</c> for an infinite wait.</param>
            <param name="condition">The condition.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="condition"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="maxWaitMs"/> is negative and not equal to <see cref="F:System.Threading.Timeout.Infinite"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the function is not executing in a coroutine.</exception>
            <returns>A coroutine task that returns true if <paramref name="condition"/> evaluates to true during the timeout period; otherwise false.</returns>
        </member>
        <member name="M:Buddy.Coroutines.Coroutine.ExternalTask(System.Threading.Tasks.Task)">
            <summary>
            Gets a coroutine task that waits for completion of an external task (a task not running as a coroutine).
            </summary>
            <param name="externalTask">The external task.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="externalTask"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if this function is not called from a coroutine.</exception>
            <remarks>Do not pass a coroutine task to this function. Doing so will result in possible dead locks and exceptions.</remarks>
        </member>
        <member name="M:Buddy.Coroutines.Coroutine.ExternalTask(System.Threading.Tasks.Task,System.TimeSpan)">
            <summary>
            Gets a coroutine task that waits for completion of an external task (a task not running as a coroutine).
            </summary>
            <param name="externalTask">The external task.</param>
            <param name="timeout">The max time to wait for the external task to complete.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="externalTask"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="timeout"/> is negative (and not equal to <see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/>).</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if this function is not called from a coroutine.</exception>
            <returns><c>true</c> if the external task completed within <paramref name="timeout"/>; otherwise <c>false</c>.</returns>
            <remarks>Do not pass a coroutine task to this function. Doing so will result in possible dead locks and exceptions.</remarks>
        </member>
        <member name="M:Buddy.Coroutines.Coroutine.ExternalTask(System.Threading.Tasks.Task,System.Int32)">
            <summary>
            Gets a coroutine task that waits for completion of an external task (a task not running as a coroutine).
            </summary>
            <param name="externalTask">The external task.</param>
            <param name="millisecondsTimeout">The max time to wait for the external task to complete, in milliseconds.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="externalTask"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="millisecondsTimeout"/> is negative (and not equal to <see cref="F:System.Threading.Timeout.Infinite"/>).</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if this function is not called from a coroutine.</exception>
            <returns><c>true</c> if the external task completed within <paramref name="millisecondsTimeout"/>; otherwise <c>false</c>.</returns>
            <remarks>Do not pass a coroutine task to this function. Doing so will result in possible dead locks and exceptions.</remarks>
        </member>
        <member name="M:Buddy.Coroutines.Coroutine.ExternalTask``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Gets a coroutine task that waits for completion of an external task (a task not running as a coroutine).
            </summary>
            <typeparam name="T">The return type of the external task.</typeparam>
            <param name="externalTask">The external task.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="externalTask"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if this function is not called from a coroutine.</exception>
            <returns>The result of the external task.</returns>
            <remarks>Do not pass a coroutine task to this function. Doing so will result in possible dead locks and exceptions.</remarks>
        </member>
        <member name="M:Buddy.Coroutines.Coroutine.ExternalTask``1(System.Threading.Tasks.Task{``0},System.TimeSpan)">
            <summary>
            Gets a coroutine task that waits for completion of an external task (a task not running as a coroutine).
            </summary>
            <typeparam name="T">The return type of the external task.</typeparam>
            <param name="externalTask">The external task.</param>
            <param name="timeout">The max time to wait for the external task to complete.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="externalTask"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="timeout"/> is negative (and not equal to <see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/>).</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if this function is not called from a coroutine.</exception>
            <returns>The result of the wait which indicates whether the external task timed out or not, and if not, the actual result.</returns>
            <remarks>Do not pass a coroutine task to this function. Doing so will result in possible dead locks and exceptions.</remarks>
        </member>
        <member name="M:Buddy.Coroutines.Coroutine.ExternalTask``1(System.Threading.Tasks.Task{``0},System.Int32)">
            <summary>
            Gets a coroutine task that waits for completion of an external task (a task not running as a coroutine).
            </summary>
            <typeparam name="T">The return type of the external task.</typeparam>
            <param name="externalTask">The external task.</param>
            <param name="millisecondsTimeout">The max time to wait for the external task to complete, in milliseconds.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="externalTask"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="millisecondsTimeout"/> is negative (and not equal to <see cref="F:System.Threading.Timeout.Infinite"/>).</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if this function is not called from a coroutine.</exception>
            <returns>The result of the wait which indicates whether the external task timed out or not, and if not, the actual result.</returns>
            <remarks>Do not pass a coroutine task to this function. Doing so will result in possible dead locks and exceptions.</remarks>
        </member>
        <member name="P:Buddy.Coroutines.Coroutine.Current">
            <summary>
            Gets the currently executing coroutine on this thread, or null, if not executing in a coroutine.
            </summary>
        </member>
        <member name="P:Buddy.Coroutines.Coroutine.Result">
            <summary>
            Gets the result returned by the original task.
            </summary>
            <remarks>Only valid when <see cref="P:Buddy.Coroutines.Coroutine.Status"/> is <see cref="F:Buddy.Coroutines.CoroutineStatus.RanToCompletion"/>.</remarks>
        </member>
        <member name="P:Buddy.Coroutines.Coroutine.Status">
            <summary>
            Gets the status this coroutine is currently in.
            </summary>
        </member>
        <member name="P:Buddy.Coroutines.Coroutine.IsDisposed">
            <summary>
            Gets a value indicating whether this coroutine has been disposed of.
            </summary>
        </member>
        <member name="P:Buddy.Coroutines.Coroutine.FaultingException">
            <summary>
            Gets the exception that was thrown when this coroutine faulted.
            </summary>
            <remarks>This can be a <see cref="T:Buddy.Coroutines.CoroutineUnhandledException"/> or a <see cref="T:Buddy.Coroutines.CoroutineBehaviorException"/>.</remarks>
        </member>
        <member name="P:Buddy.Coroutines.Coroutine.IsFinished">
            <summary>
            Gets a bool that indicates whether the coroutine is finished
            </summary>
        </member>
        <member name="P:Buddy.Coroutines.Coroutine.Ticks">
            <summary>
            Gets the amount of times the coroutine has been resumed/ticked.
            </summary>
        </member>
        <member name="T:Buddy.Coroutines.CoroutineBehaviorException">
            <summary>
            Represents an exception that is thrown when a coroutine behaves unexpectedly.
            </summary>
        </member>
        <member name="T:Buddy.Coroutines.CoroutineException">
            <summary>
            Represents the base class for exceptions thrown by the coroutine framework.
            </summary>
        </member>
        <member name="M:Buddy.Coroutines.CoroutineException.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Buddy.Coroutines.CoroutineException"/> with the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Buddy.Coroutines.CoroutineException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new <see cref="T:Buddy.Coroutines.CoroutineException"/> with the specified message and inner exception.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Buddy.Coroutines.CoroutineBehaviorException.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Buddy.Coroutines.CoroutineBehaviorException"/> with the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Buddy.Coroutines.CoroutineBehaviorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new <see cref="T:Buddy.Coroutines.CoroutineBehaviorException"/> with the specified message and inner exception.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Buddy.Coroutines.CoroutineStoppedException">
            <summary>
            Represents an exception that is thrown when the coroutine is stopped.
            </summary>
        </member>
        <member name="T:Buddy.Coroutines.CoroutineStatus">
            <summary>
            Represents the different states a coroutine can be in.
            </summary>
        </member>
        <member name="F:Buddy.Coroutines.CoroutineStatus.Runnable">
            <summary>
            The coroutine is runnable.
            </summary>
        </member>
        <member name="F:Buddy.Coroutines.CoroutineStatus.RanToCompletion">
            <summary>
            The coroutine has finished running successfully.
            </summary>
        </member>
        <member name="F:Buddy.Coroutines.CoroutineStatus.Stopped">
            <summary>
            The coroutine finished running by being stopped.
            </summary>
        </member>
        <member name="F:Buddy.Coroutines.CoroutineStatus.Faulted">
            <summary>
            The coroutine finished running with an error.
            </summary>
        </member>
        <member name="T:Buddy.Coroutines.CoroutineUnhandledException">
            <summary>
            Represents an exception that is thrown when a coroutine throws an exception.
            </summary>
            <remarks>The exception thrown can be accessed through <see cref="P:System.Exception.InnerException"/>.</remarks>
        </member>
        <member name="M:Buddy.Coroutines.CoroutineUnhandledException.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Buddy.Coroutines.CoroutineUnhandledException"/> with the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Buddy.Coroutines.CoroutineUnhandledException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new <see cref="T:Buddy.Coroutines.CoroutineUnhandledException"/> with the specified message and inner exception.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Buddy.Coroutines.ExternalTaskWaitResult`1">
            <summary>
            Represents the result of an external task wait.
            </summary>
            <typeparam name="T">The return type of the external task.</typeparam>
        </member>
        <member name="P:Buddy.Coroutines.ExternalTaskWaitResult`1.Completed">
            <summary>Gets a value that indicates whether the task completed in the allotted timeout period.</summary>
        </member>
        <member name="P:Buddy.Coroutines.ExternalTaskWaitResult`1.Result">
            <summary>Gets the result of the external task. Only valid if <see cref="P:Buddy.Coroutines.ExternalTaskWaitResult`1.Completed"/> is <c>true</c>.</summary>
        </member>
        <member name="T:Buddy.Coroutines.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:Buddy.Coroutines.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:Buddy.Coroutines.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:Buddy.Coroutines.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:Buddy.Coroutines.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:Buddy.Coroutines.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:Buddy.Coroutines.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:Buddy.Coroutines.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:Buddy.Coroutines.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:Buddy.Coroutines.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:Buddy.Coroutines.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:Buddy.Coroutines.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:Buddy.Coroutines.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:Buddy.Coroutines.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:Buddy.Coroutines.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:Buddy.Coroutines.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:Buddy.Coroutines.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly
            when marked with <see cref="T:Buddy.Coroutines.MeansImplicitUseAttribute"/>
            or <see cref="T:Buddy.Coroutines.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:Buddy.Coroutines.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:Buddy.Coroutines.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:Buddy.Coroutines.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:Buddy.Coroutines.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:Buddy.Coroutines.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:Buddy.Coroutines.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder
            within a web project. Path can be relative or absolute,
            starting from web root (~)
            </summary>
        </member>
        <member name="T:Buddy.Coroutines.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Buddy.Coroutines.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Buddy.Coroutines.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC controller. If applied to a method,
            the MVC controller name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:Buddy.Coroutines.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:Buddy.Coroutines.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:Buddy.Coroutines.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC partial view. If applied to a method,
            the MVC partial view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Buddy.Coroutines.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling all inspections
            for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:Buddy.Coroutines.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Buddy.Coroutines.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Buddy.Coroutines.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:Buddy.Coroutines.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:Buddy.Coroutines.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:Buddy.Coroutines.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
    </members>
</doc>
